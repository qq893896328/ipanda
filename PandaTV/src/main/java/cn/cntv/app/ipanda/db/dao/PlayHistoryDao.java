package cn.cntv.app.ipanda.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import cn.cntv.app.ipanda.db.entity.PlayHistoryEntity;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "playhistory".
*/
public class PlayHistoryDao extends AbstractDao<PlayHistoryEntity, String> {

    public static final String TABLENAME = "playhistory";

    /**
     * Properties of entity PlayHistoryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sign = new Property(0, Integer.class, "sign", false, "SIGN");
        public final static Property VideoType = new Property(1, String.class, "videoType", false, "videoTypeo");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property TimeLenth = new Property(3, String.class, "timeLenth", false, "timeLenth");
        public final static Property Vid = new Property(4, String.class, "vid", false, "VID");
        public final static Property VideoImg = new Property(5, String.class, "videoImg", false, "videoImg");
        public final static Property Uid = new Property(6, String.class, "uid", false, "UID");
        public final static Property Pid = new Property(7, String.class, "pid", true, "PID");
        public final static Property Pageurl = new Property(8, String.class, "pageurl", false, "pageurl");
        public final static Property Ip = new Property(9, String.class, "ip", false, "IP");
        public final static Property Playtime = new Property(10, Long.class, "playtime", false, "playtime");
        public final static Property Client = new Property(11, String.class, "client", false, "CLIENT");
        public final static Property Clienttype = new Property(12, String.class, "clienttype", false, "clienttype");
        public final static Property Position = new Property(13, String.class, "position", false, "POSITION");
        public final static Property Ischeck = new Property(14, Boolean.class, "ischeck", false, "ISCHECK");
        public final static Property IsSingleVideo = new Property(15, Boolean.class, "isSingleVideo", false, "isSingleVideo");
    };


    public PlayHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public PlayHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"playhistory\" (" + //
                "\"SIGN\" INTEGER," + // 0: sign
                "\"videoTypeo\" TEXT," + // 1: videoType
                "\"TITLE\" TEXT," + // 2: title
                "\"timeLenth\" TEXT," + // 3: timeLenth
                "\"VID\" TEXT," + // 4: vid
                "\"videoImg\" TEXT," + // 5: videoImg
                "\"UID\" TEXT," + // 6: uid
                "\"PID\" TEXT PRIMARY KEY NOT NULL ," + // 7: pid
                "\"pageurl\" TEXT," + // 8: pageurl
                "\"IP\" TEXT," + // 9: ip
                "\"playtime\" INTEGER," + // 10: playtime
                "\"CLIENT\" TEXT," + // 11: client
                "\"clienttype\" TEXT," + // 12: clienttype
                "\"POSITION\" TEXT," + // 13: position
                "\"ISCHECK\" INTEGER," + // 14: ischeck
                "\"isSingleVideo\" INTEGER);"); // 15: isSingleVideo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"playhistory\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PlayHistoryEntity entity) {
        stmt.clearBindings();
 
        Integer sign = entity.getSign();
        if (sign != null) {
            stmt.bindLong(1, sign);
        }
 
        String videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindString(2, videoType);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String timeLenth = entity.getTimeLenth();
        if (timeLenth != null) {
            stmt.bindString(4, timeLenth);
        }
 
        String vid = entity.getVid();
        if (vid != null) {
            stmt.bindString(5, vid);
        }
 
        String videoImg = entity.getVideoImg();
        if (videoImg != null) {
            stmt.bindString(6, videoImg);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(7, uid);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(8, pid);
        }
 
        String pageurl = entity.getPageurl();
        if (pageurl != null) {
            stmt.bindString(9, pageurl);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(10, ip);
        }
 
        Long playtime = entity.getPlaytime();
        if (playtime != null) {
            stmt.bindLong(11, playtime);
        }
 
        String client = entity.getClient();
        if (client != null) {
            stmt.bindString(12, client);
        }
 
        String clienttype = entity.getClienttype();
        if (clienttype != null) {
            stmt.bindString(13, clienttype);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(14, position);
        }
 
        Boolean ischeck = entity.getIscheck();
        if (ischeck != null) {
            stmt.bindLong(15, ischeck ? 1L: 0L);
        }
 
        Boolean isSingleVideo = entity.getIsSingleVideo();
        if (isSingleVideo != null) {
            stmt.bindLong(16, isSingleVideo ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7);
    }    

    /** @inheritdoc */
    @Override
    public PlayHistoryEntity readEntity(Cursor cursor, int offset) {
        PlayHistoryEntity entity = new PlayHistoryEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // sign
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videoType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // timeLenth
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // videoImg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // uid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pageurl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ip
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // playtime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // client
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // clienttype
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // position
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // ischeck
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0 // isSingleVideo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PlayHistoryEntity entity, int offset) {
        entity.setSign(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setVideoType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeLenth(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideoImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPageurl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIp(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPlaytime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setClient(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setClienttype(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPosition(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIscheck(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setIsSingleVideo(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(PlayHistoryEntity entity, long rowId) {
        return entity.getPid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(PlayHistoryEntity entity) {
        if(entity != null) {
            return entity.getPid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
