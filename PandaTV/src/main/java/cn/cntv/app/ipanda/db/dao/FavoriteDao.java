package cn.cntv.app.ipanda.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import cn.cntv.app.ipanda.db.entity.FavoriteEntity;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "collect".
*/
public class FavoriteDao extends AbstractDao<FavoriteEntity, String> {

    public static final String TABLENAME = "collect";

    /**
     * Properties of entity FavoriteEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Object_id = new Property(0, String.class, "object_id", true, "OBJECT_ID");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Collect_id = new Property(2, String.class, "collect_id", false, "COLLECT_ID");
        public final static Property Object_title = new Property(3, String.class, "object_title", false, "OBJECT_TITLE");
        public final static Property Object_title2 = new Property(4, String.class, "object_title2", false, "OBJECT_TITLE2");
        public final static Property Object_logo = new Property(5, String.class, "object_logo", false, "OBJECT_LOGO");
        public final static Property Object_url = new Property(6, String.class, "object_url", false, "OBJECT_URL");
        public final static Property Video_pid = new Property(7, String.class, "video_pid", false, "VIDEO_PID");
        public final static Property Collect_date = new Property(8, Long.class, "collect_date", false, "COLLECT_DATE");
        public final static Property Collect_type = new Property(9, Integer.class, "collect_type", false, "COLLECT_TYPE");
        public final static Property PageSource = new Property(10, Integer.class, "pageSource", false, "source");
        public final static Property Product = new Property(11, String.class, "product", false, "PRODUCT");
        public final static Property Flag = new Property(12, Integer.class, "flag", false, "FLAG");
        public final static Property VideoLength = new Property(13, String.class, "videoLength", false, "videoLength");
        public final static Property IsUploadSucc = new Property(14, String.class, "isUploadSucc", false, "isUploadSucc");
        public final static Property IsShowEditUi = new Property(15, Boolean.class, "isShowEditUi", false, "isShowEditUi");
        public final static Property IsChecked = new Property(16, Boolean.class, "isChecked", false, "isChecked");
        public final static Property IsSingleVideo = new Property(17, Boolean.class, "isSingleVideo", false, "isSingleVideo");
    };


    public FavoriteDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"collect\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: object_id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"COLLECT_ID\" TEXT," + // 2: collect_id
                "\"OBJECT_TITLE\" TEXT," + // 3: object_title
                "\"OBJECT_TITLE2\" TEXT," + // 4: object_title2
                "\"OBJECT_LOGO\" TEXT," + // 5: object_logo
                "\"OBJECT_URL\" TEXT," + // 6: object_url
                "\"VIDEO_PID\" TEXT," + // 7: video_pid
                "\"COLLECT_DATE\" INTEGER," + // 8: collect_date
                "\"COLLECT_TYPE\" INTEGER," + // 9: collect_type
                "\"source\" INTEGER," + // 10: pageSource
                "\"PRODUCT\" TEXT," + // 11: product
                "\"FLAG\" INTEGER," + // 12: flag
                "\"videoLength\" TEXT," + // 13: videoLength
                "\"isUploadSucc\" TEXT," + // 14: isUploadSucc
                "\"isShowEditUi\" INTEGER," + // 15: isShowEditUi
                "\"isChecked\" INTEGER," + // 16: isChecked
                "\"isSingleVideo\" INTEGER);"); // 17: isSingleVideo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"collect\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FavoriteEntity entity) {
        stmt.clearBindings();
 
        String object_id = entity.getObject_id();
        if (object_id != null) {
            stmt.bindString(1, object_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String collect_id = entity.getCollect_id();
        if (collect_id != null) {
            stmt.bindString(3, collect_id);
        }
 
        String object_title = entity.getObject_title();
        if (object_title != null) {
            stmt.bindString(4, object_title);
        }
 
        String object_title2 = entity.getObject_title2();
        if (object_title2 != null) {
            stmt.bindString(5, object_title2);
        }
 
        String object_logo = entity.getObject_logo();
        if (object_logo != null) {
            stmt.bindString(6, object_logo);
        }
 
        String object_url = entity.getObject_url();
        if (object_url != null) {
            stmt.bindString(7, object_url);
        }
 
        String video_pid = entity.getVideo_pid();
        if (video_pid != null) {
            stmt.bindString(8, video_pid);
        }
 
        Long collect_date = entity.getCollect_date();
        if (collect_date != null) {
            stmt.bindLong(9, collect_date);
        }
 
        Integer collect_type = entity.getCollect_type();
        if (collect_type != null) {
            stmt.bindLong(10, collect_type);
        }
 
        Integer pageSource = entity.getPageSource();
        if (pageSource != null) {
            stmt.bindLong(11, pageSource);
        }
 
        String product = entity.getProduct();
        if (product != null) {
            stmt.bindString(12, product);
        }
 
        Integer flag = entity.getFlag();
        if (flag != null) {
            stmt.bindLong(13, flag);
        }
 
        String videoLength = entity.getVideoLength();
        if (videoLength != null) {
            stmt.bindString(14, videoLength);
        }
 
        String isUploadSucc = entity.getIsUploadSucc();
        if (isUploadSucc != null) {
            stmt.bindString(15, isUploadSucc);
        }
 
        Boolean isShowEditUi = entity.getIsShowEditUi();
        if (isShowEditUi != null) {
            stmt.bindLong(16, isShowEditUi ? 1L: 0L);
        }
 
        Boolean isChecked = entity.getIsChecked();
        if (isChecked != null) {
            stmt.bindLong(17, isChecked ? 1L: 0L);
        }
 
        Boolean isSingleVideo = entity.getIsSingleVideo();
        if (isSingleVideo != null) {
            stmt.bindLong(18, isSingleVideo ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FavoriteEntity readEntity(Cursor cursor, int offset) {
        FavoriteEntity entity = new FavoriteEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // object_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // collect_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // object_title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // object_title2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // object_logo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // object_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // video_pid
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // collect_date
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // collect_type
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // pageSource
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // product
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // flag
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // videoLength
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // isUploadSucc
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // isShowEditUi
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // isChecked
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0 // isSingleVideo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FavoriteEntity entity, int offset) {
        entity.setObject_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCollect_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setObject_title(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setObject_title2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setObject_logo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setObject_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVideo_pid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCollect_date(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setCollect_type(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setPageSource(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setProduct(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFlag(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setVideoLength(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsUploadSucc(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsShowEditUi(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setIsChecked(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setIsSingleVideo(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(FavoriteEntity entity, long rowId) {
        return entity.getObject_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(FavoriteEntity entity) {
        if(entity != null) {
            return entity.getObject_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
